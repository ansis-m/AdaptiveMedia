/*
 * This file is generated by jOOQ.
 */
package com.adaptivemedia.assignment.jooq.tables.daos;


import com.adaptivemedia.assignment.jooq.tables.FetchLog;
import com.adaptivemedia.assignment.jooq.tables.records.FetchLogRecord;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class FetchLogDao extends DAOImpl<FetchLogRecord, com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog, Long> {

    /**
     * Create a new FetchLogDao without any configuration
     */
    public FetchLogDao() {
        super(FetchLog.FETCH_LOG, com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog.class);
    }

    /**
     * Create a new FetchLogDao with an attached configuration
     */
    @Autowired
    public FetchLogDao(Configuration configuration) {
        super(FetchLog.FETCH_LOG, com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog.class, configuration);
    }

    @Override
    public Long getId(com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(FetchLog.FETCH_LOG.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog> fetchById(Long... values) {
        return fetch(FetchLog.FETCH_LOG.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog fetchOneById(Long value) {
        return fetchOne(FetchLog.FETCH_LOG.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog> fetchOptionalById(Long value) {
        return fetchOptional(FetchLog.FETCH_LOG.ID, value);
    }

    /**
     * Fetch records that have <code>fetch_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog> fetchRangeOfFetchDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(FetchLog.FETCH_LOG.FETCH_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fetch_date IN (values)</code>
     */
    public List<com.adaptivemedia.assignment.jooq.tables.pojos.FetchLog> fetchByFetchDate(LocalDate... values) {
        return fetch(FetchLog.FETCH_LOG.FETCH_DATE, values);
    }
}
