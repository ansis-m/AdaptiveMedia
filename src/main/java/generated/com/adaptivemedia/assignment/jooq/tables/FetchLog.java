/*
 * This file is generated by jOOQ.
 */
package com.adaptivemedia.assignment.jooq.tables;


import com.adaptivemedia.assignment.jooq.Keys;
import com.adaptivemedia.assignment.jooq.Public;
import com.adaptivemedia.assignment.jooq.tables.records.FetchLogRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FetchLog extends TableImpl<FetchLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.fetch_log</code>
     */
    public static final FetchLog FETCH_LOG = new FetchLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FetchLogRecord> getRecordType() {
        return FetchLogRecord.class;
    }

    /**
     * The column <code>public.fetch_log.id</code>.
     */
    public final TableField<FetchLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.fetch_log.fetch_timestamp</code>.
     */
    public final TableField<FetchLogRecord, LocalDateTime> FETCH_TIMESTAMP = createField(DSL.name("fetch_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private FetchLog(Name alias, Table<FetchLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FetchLog(Name alias, Table<FetchLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.fetch_log</code> table reference
     */
    public FetchLog(String alias) {
        this(DSL.name(alias), FETCH_LOG);
    }

    /**
     * Create an aliased <code>public.fetch_log</code> table reference
     */
    public FetchLog(Name alias) {
        this(alias, FETCH_LOG);
    }

    /**
     * Create a <code>public.fetch_log</code> table reference
     */
    public FetchLog() {
        this(DSL.name("fetch_log"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FetchLogRecord, Long> getIdentity() {
        return (Identity<FetchLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FetchLogRecord> getPrimaryKey() {
        return Keys.FETCH_LOG_PKEY;
    }

    @Override
    public FetchLog as(String alias) {
        return new FetchLog(DSL.name(alias), this);
    }

    @Override
    public FetchLog as(Name alias) {
        return new FetchLog(alias, this);
    }

    @Override
    public FetchLog as(Table<?> alias) {
        return new FetchLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FetchLog rename(String name) {
        return new FetchLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FetchLog rename(Name name) {
        return new FetchLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FetchLog rename(Table<?> name) {
        return new FetchLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchLog where(Condition condition) {
        return new FetchLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
