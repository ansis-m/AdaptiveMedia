/*
 * This file is generated by jOOQ.
 */
package com.adaptivemedia.assignment.jooq.tables;


import com.adaptivemedia.assignment.jooq.Indexes;
import com.adaptivemedia.assignment.jooq.Keys;
import com.adaptivemedia.assignment.jooq.Public;
import com.adaptivemedia.assignment.jooq.tables.records.SalesDataRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Sales tracking data received from external APIs
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SalesData extends TableImpl<SalesDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sales_data</code>
     */
    public static final SalesData SALES_DATA = new SalesData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesDataRecord> getRecordType() {
        return SalesDataRecord.class;
    }

    /**
     * The column <code>public.sales_data.id</code>.
     */
    public final TableField<SalesDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sales_data.tracking_id</code>. Unique identifier
     * for tracking visitor to sale conversion
     */
    public final TableField<SalesDataRecord, String> TRACKING_ID = createField(DSL.name("tracking_id"), SQLDataType.VARCHAR(255).nullable(false), this, "Unique identifier for tracking visitor to sale conversion");

    /**
     * The column <code>public.sales_data.visit_date</code>. When the visitor
     * first arrived
     */
    public final TableField<SalesDataRecord, LocalDateTime> VISIT_DATE = createField(DSL.name("visit_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "When the visitor first arrived");

    /**
     * The column <code>public.sales_data.sale_date</code>. When the sale was
     * completed (null if no sale yet)
     */
    public final TableField<SalesDataRecord, LocalDateTime> SALE_DATE = createField(DSL.name("sale_date"), SQLDataType.LOCALDATETIME(6), this, "When the sale was completed (null if no sale yet)");

    /**
     * The column <code>public.sales_data.sale_price</code>. Final sale price in
     * USD
     */
    public final TableField<SalesDataRecord, BigDecimal> SALE_PRICE = createField(DSL.name("sale_price"), SQLDataType.NUMERIC(15, 2), this, "Final sale price in USD");

    /**
     * The column <code>public.sales_data.product</code>. Product name or
     * identifier
     */
    public final TableField<SalesDataRecord, String> PRODUCT = createField(DSL.name("product"), SQLDataType.VARCHAR(500), this, "Product name or identifier");

    /**
     * The column <code>public.sales_data.commission_amount</code>. Commission
     * earned from this sale
     */
    public final TableField<SalesDataRecord, BigDecimal> COMMISSION_AMOUNT = createField(DSL.name("commission_amount"), SQLDataType.NUMERIC(15, 2), this, "Commission earned from this sale");

    /**
     * The column <code>public.sales_data.created_at</code>.
     */
    public final TableField<SalesDataRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.sales_data.updated_at</code>.
     */
    public final TableField<SalesDataRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private SalesData(Name alias, Table<SalesDataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SalesData(Name alias, Table<SalesDataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Sales tracking data received from external APIs"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.sales_data</code> table reference
     */
    public SalesData(String alias) {
        this(DSL.name(alias), SALES_DATA);
    }

    /**
     * Create an aliased <code>public.sales_data</code> table reference
     */
    public SalesData(Name alias) {
        this(alias, SALES_DATA);
    }

    /**
     * Create a <code>public.sales_data</code> table reference
     */
    public SalesData() {
        this(DSL.name("sales_data"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SALES_DATA_SALE_DATE, Indexes.IDX_SALES_DATA_TRACKING_ID, Indexes.IDX_SALES_DATA_VISIT_DATE);
    }

    @Override
    public Identity<SalesDataRecord, Long> getIdentity() {
        return (Identity<SalesDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SalesDataRecord> getPrimaryKey() {
        return Keys.SALES_DATA_PKEY;
    }

    @Override
    public List<UniqueKey<SalesDataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SALES_DATA_TRACKING_ID_KEY);
    }

    @Override
    public SalesData as(String alias) {
        return new SalesData(DSL.name(alias), this);
    }

    @Override
    public SalesData as(Name alias) {
        return new SalesData(alias, this);
    }

    @Override
    public SalesData as(Table<?> alias) {
        return new SalesData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SalesData rename(String name) {
        return new SalesData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SalesData rename(Name name) {
        return new SalesData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SalesData rename(Table<?> name) {
        return new SalesData(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SalesData where(Condition condition) {
        return new SalesData(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SalesData where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SalesData where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SalesData where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SalesData where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SalesData where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SalesData where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SalesData where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SalesData whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SalesData whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
